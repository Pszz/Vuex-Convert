import Vue from"vue";const Convert=function(conf){if(!(this instanceof Convert))return new Convert(conf);this.state={},this.getters={},this.mutations={},this.actions={},this.modules={};let _public=conf.public||{},_modules=conf.modules||{};function convert(key,value,modules){let attrName=toUppercaseFirst(key),setName="set"+attrName,saveType=value.storage;"object"===getTypeof(value)?modules.state[key]=void 0===value.value?{}:value.value:modules.state[key]=value,modules.getters["get"+attrName]=function(state){let data=state[key];if("local"===saveType||"session"===saveType){let localData=window[`${saveType}Storage`].getItem(key);null!==localData&&(data=JSON.parse(localData||null),Vue.set(state,key,data))}return"function"==typeof value.getters?value.getters(state,key):data},!1!==value.actions&&(modules.actions[setName]=function({commit:commit},payload){"function"==typeof value.actions?value.actions.apply(this,[setName,...arguments]):commit(setName,payload)}),!1!==value.mutation&&(modules.mutations[setName]=function(state,data){Vue.set(state,key,data),"local"!==saveType&&"session"!==saveType||window[`${saveType}Storage`].setItem(key,JSON.stringify(data))})}function getTypeof(args){return Object.prototype.toString.call(args).replace(/\[object |\]/g,"").toLocaleLowerCase()}function toUppercaseFirst(word){return word.replace(/( |^)[a-z]/g,L=>L.toUpperCase())}Object.keys(_public).forEach(v=>{convert(v,_public[v],this)}),Object.keys(_modules).forEach(v=>{let moduleItem=this.modules[v]={namespaced:!0,state:{},getters:{},actions:{},mutations:{}};Object.keys(_modules[v]).forEach(mv=>{convert(mv,_modules[v][mv],moduleItem)})})};export default Convert;